name: Test and Release
on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          pip install flask requests colorama
      
      - name: Install Hurl
        run: |
           curl -L https://github.com/Orange-OpenSource/hurl/releases/download/7.0.0/hurl_7.0.0_amd64.deb -o hurl.deb
           sudo dpkg -i hurl.deb      
     
      - name: Create .env file from secrets
        run: | 
          echo "SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}" > .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_REALTIME_URL=${{ secrets.SUPABASE_REALTIME_URL }}" >> .env
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env
          echo "SELF_HOSTED=false" >> .env
      
      - name: Run Docker integration tests
        run: make test-docker  
        env: 
          ADMIN_SECRET_KEY: ${{ secrets.ADMIN_SECRET_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_REALTIME_URL: ${{ secrets.SUPABASE_REALTIME_URL }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        
  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Build and push
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/tracktags
          docker build -t $IMAGE:${{ github.sha }} .
          docker push $IMAGE:${{ github.sha }}
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            docker tag $IMAGE:${{ github.sha }} $IMAGE:${{ github.ref_name }}
            docker push $IMAGE:${{ github.ref_name }}
            docker tag $IMAGE:${{ github.sha }} $IMAGE:latest
            docker push $IMAGE:latest
          fi

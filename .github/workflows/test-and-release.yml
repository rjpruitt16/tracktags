name: Test and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Python dependencies
        run: pip install flask
      
      - name: Install Hurl
        run: |
          curl -L https://github.com/Orange-OpenSource/hurl/releases/download/4.1.0/hurl_4.1.0_amd64.deb -o hurl.deb
          sudo dpkg -i hurl.deb
      
      - name: Create .env file from secrets
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_REALTIME_URL=${{ secrets.SUPABASE_REALTIME_URL }}" >> .env
          echo "ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}" >> .env
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
          echo "SELF_HOSTED=false" >> .env
      
      - name: Run Docker integration tests with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: make test-docker
          warning_on_retry: true
          on_retry_command: |
            echo "Test failed, showing Docker logs..."
            docker compose -f docker-compose.test.yml logs --tail=50
            echo "Cleaning up before retry..."
            docker compose -f docker-compose.test.yml down
            docker system prune -f

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Build and push
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/tracktags
          docker build -t $IMAGE:${{ github.sha }} .
          docker push $IMAGE:${{ github.sha }}
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            docker tag $IMAGE:${{ github.sha }} $IMAGE:${{ github.ref_name }}
            docker push $IMAGE:${{ github.ref_name }}
            docker tag $IMAGE:${{ github.sha }} $IMAGE:latest
            docker push $IMAGE:latest
          fi
